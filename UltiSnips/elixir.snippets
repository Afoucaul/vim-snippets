priority -50

######################################
# ELIXIR DOCUMENTATION-FULL SNIPPETS #
######################################

global !p
import os

def write_spec(t, snip):
    """Write the @spec of a function"""
    snip.rv += "@spec {0}({1}) :: TODO".format(
        t[1],
        ", ".join("{0}::TODO".format(arg.strip()) for arg in t[2].split(',')))


def write_type_fields(t, snip):
    """Write the fields inside of a type definition"""
    fields = [field.split(':')[0].strip() for field in t[1].split(',')]
    maxlength = max(len(field) for field in fields)

    snip.rv += "\n{}".format(snip.indent).join(
        "{0}{1}: {2}{3}TODO_TYPE,".format(
            snip._initial_indent,
            field,
            snip._ind.shiftwidth * ' ',
            ' ' * (maxlength - len(field)))
        for field in fields)


def write_typedoc_fields(t, snip):
    """Write the fields of a type in a @typespec"""
    fields = [field.split(':')[0].strip() for field in t[1].split(',')]
    maxlength = max(len(field) for field in fields)

    snip.rv += "\n{}".format(snip.indent).join(
        "{0}- {1}: {2}{3}TODO_DESCRIPTION".format(
            snip._initial_indent, 
            field,
            snip._ind.shiftwidth * ' ',
            ' ' * (maxlength - len(field)))
        for field in fields)

endglobal



############
# SNIPPETS #
############

# These snippets are designed to automatically include various documentation.
# This aims at encouraging writing well-formatted and documented code.


snippet defd "Function with docstring and typespecs"
@doc ~S"""
${3:One-line summary}
"""
`!p write_spec(t, snip)`
def ${1:function_name}(${2:arg1})
endsnippet


snippet defmd "Module with doc"
defmodule ${1:module_name} do
  @moduledoc ~S"""
  ${2:One-line summary}
  """

  ${3:body}
end
endsnippet


snippet defsd "Struct with typespec"
defstruct [
  ${1:field1}
]

@typedoc ~S"""
${2:Type summary}

Fields:
`!p write_typedoc_fields(t, snip)`
"""

type t :: %__MODULE__{
`!p write_type_fields(t, snip)`
}
endsnippet
